import { Component, Input, ContentChildren, Output, EventEmitter } from '@angular/core';
import { isInt } from '../util/util';
import { NglTab } from './tab';
export var NglTabs = (function () {
    function NglTabs() {
        this.type = 'default';
        this.selectedChange = new EventEmitter();
    }
    Object.defineProperty(NglTabs.prototype, "setSelected", {
        set: function (selected) {
            if (selected === this.selected)
                return;
            this.selected = selected;
            if (!this.tabs)
                return; // Wait for content to initialize
            this.activate();
        },
        enumerable: true,
        configurable: true
    });
    NglTabs.prototype.ngAfterContentInit = function () {
        var _this = this;
        // Initial selection after all tabs are created
        this.activate();
        if (!this.activeTab) {
            setTimeout(function () { return _this.select(_this.tabs.first); });
        }
    };
    NglTabs.prototype.select = function (tab) {
        this.selectedChange.emit(tab);
    };
    NglTabs.prototype.move = function (evt, moves) {
        evt.preventDefault();
        var tabs = this.tabs.toArray();
        var selectedIndex = tabs.indexOf(this.activeTab);
        this.select(tabs[(tabs.length + selectedIndex + moves) % tabs.length]);
    };
    NglTabs.prototype.activate = function () {
        var _this = this;
        this.activeTab = this.findTab();
        this.tabs.forEach(function (t) { return t.active = (t === _this.activeTab); });
    };
    NglTabs.prototype.findTab = function (value) {
        if (value === void 0) { value = this.selected; }
        if (value instanceof NglTab) {
            return value;
        }
        if (isInt(value)) {
            return this.tabs.toArray()[+value];
        }
        return this.tabs.toArray().find(function (t) {
            return t.id && t.id === value;
        });
    };
    NglTabs.decorators = [
        { type: Component, args: [{
                    selector: 'ngl-tabs',
                    template: "\n    <ul [ngClass]=\"'slds-tabs--' + type + '__nav'\" role=\"tablist\" (keydown.ArrowLeft)=\"move($event, -1)\" (keydown.ArrowRight)=\"move($event, 1)\"><li class=\"slds-text-title--caps\" *ngFor=\"let tab of tabs\" [ngClass]=\"'slds-tabs--' + type + '__item'\" (click)=\"select(tab)\" [class.slds-active]=\"tab.active\" role=\"presentation\"><a [nglInternalOutlet]=\"tab.heading\" [ngClass]=\"'slds-tabs--' + type + '__link'\" role=\"tab\" [attr.aria-selected]=\"tab.active\" [attr.tabindex]=\"tab.active ? 0 : 1\"></a></li></ul><div [ngClass]=\"'slds-tabs--' + type + '__content'\" role=\"tabpanel\"><template [ngTemplateOutlet]=\"activeTab?.templateRef\"></template></div>\n  ",
                },] },
    ];
    /** @nocollapse */
    NglTabs.ctorParameters = [];
    NglTabs.propDecorators = {
        'type': [{ type: Input },],
        'tabs': [{ type: ContentChildren, args: [NglTab,] },],
        'setSelected': [{ type: Input, args: ['selected',] },],
        'selectedChange': [{ type: Output },],
    };
    return NglTabs;
}());
//# sourceMappingURL=tabs.js.map